from filters import Admins_message
from forecast.prediction import format_statistic
from parser.parse_page import add_in_bd_page
from states import Analysis, User_balance, Send_messsage
from utils.db_api.analisis_commands import select_analysis, change_analysis
from loader import dp
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from utils.db_api import user_commands as commands
from asyncio import sleep


# –≤—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∞–¥–º–∏–Ω–∞
from utils.db_api.circ_commands import count_edition
from utils.db_api.start_stop_commands import change_start_stop
from utils.db_api.user_commands import change_balance, user_balance


@dp.message_handler(Admins_message(), Command('admin'))
async def req(message: types.Message):
    await message.answer(f'/req –ø–∞—Ä—Å–∏–Ω–≥ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–∏—Ä–∞–∂–∞\n'
                         f'/analysis –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏—Ä–∞–∂–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞\n'
                         f'/change_balance –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n'
                         f'/statistics —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–∞–¥–µ–Ω–∏–π (–ø—Ä–æ–≥–Ω–æ–∑)\n'
                         f'/message –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n'
                         f'/stop –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã\n'
                         f'/starting –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã')

# –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ /request
@dp.message_handler(Admins_message(), Command('req'))
async def req(message: types.Message):
    # –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–∏—Ä–∞–∂–∞
    await add_in_bd_page()

# –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã
@dp.message_handler(Admins_message(), Command('stop'))
async def req(message: types.Message):
    await change_start_stop('False')
    await message.answer('–ü—Ä–æ–≥–Ω–æ–∑—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã')

# –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã
@dp.message_handler(Admins_message(), Command('starting'))
async def req(message: types.Message):
    await change_start_stop('True')
    await message.answer('–ü—Ä–æ–≥–Ω–æ–∑—ã –∑–∞–ø—É—â–µ–Ω—ã')

# –∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤ —Ñ–∞–π–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏—Ä–∞–∂–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞
@dp.message_handler(Admins_message(), Command('analysis'))
async def req(message: types.Message):
    await message.answer(f'–ö–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏—Ä–∞–∂–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {await select_analysis()}\n'
                         f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:')
    await Analysis.amount.set()  # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

# –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏—Ä–∞–∂–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞:
@dp.message_handler(state=Analysis.amount)
async def accept_reg(message: types.Message, state: FSMContext):
    try:
        amount = int(message.text)
        await change_analysis(amount)
        await message.answer('–∑–∞–ø–∏—Å–∞–Ω–æ')
        await state.finish()
    except Exception:
        await message.answer('–≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ:')


# –∏–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å —é–∑–µ—Ä—É
@dp.message_handler(Admins_message(), Command('change_balance'))
async def change_user_balance(message: types.Message):
    await message.answer(f'–í–≤–µ–¥–∏—Ç–µ user_id:')
    await User_balance.user_id.set()  # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

# –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ user_id
@dp.message_handler(state=User_balance.user_id)
async def user_id(message: types.Message, state: FSMContext):
    await state.update_data(user_id=message.text)  # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ data
    # –∫–∞–∫–æ–π –±–∞–ª–∞–Ω—Å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    balance = await user_balance(int(message.text))
    await message.answer(f'–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {balance} ‚ÇΩ')
    await message.answer(f'–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:')
    await User_balance.amount.set()  # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

# –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Å—É–º–º—ã
@dp.message_handler(state=User_balance.amount)
async def user_id(message: types.Message, state: FSMContext):
    await state.update_data(amount=message.text)  # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ data
    data = await state.get_data()  # –ø–æ–ª—É—á–∞–µ–º –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Å–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤
    try:
        user = int(data.get('user_id'))  # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        amount = int(data.get('amount'))
        # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ë–î
        await change_balance(user, amount)
        # –∫–∞–∫–æ–π –±–∞–ª–∞–Ω—Å
        balance = await user_balance(user)
        await message.answer(f'–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è id: {user} —Ä–∞–≤–µ–Ω {balance} ‚ÇΩ')
    except Exception:
        await message.answer('–æ—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ /change_balance')
    await state.finish()  # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏

async def admin_statistics(message: types.Message):
    numbers_1, percent_1 = await format_statistic(1)  # —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—é 1
    numbers_2, percent_2 = await format_statistic(2)  # —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—é 1
    # –ö—Ä–∞–π–Ω–∏–π —Ç–∏—Ä–∞–∂
    last = await count_edition()
    await message.answer(f'<b>üìç–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, —Å–ª–µ–¥—É—é—â–∏–π —Ç–∏—Ä–∞–∂ ‚Ññ{last + 1}:</b>\n')
    await message.answer(f'<b>–ü–æ–ª–µ 1:</b>\n–Ω–æ–º–µ—Ä–∞:  <b>{numbers_1}</b>\n–ø—Ä–æ—Ü–µ–Ω—Ç: {percent_1}%')
    await message.answer(f'<b>–ü–æ–ª–µ 2:</b>\n–Ω–æ–º–µ—Ä–∞:  <b>{numbers_2}</b>\n–ø—Ä–æ—Ü–µ–Ω—Ç: {percent_2}%')

# –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ /statistics
@dp.message_handler(Admins_message(), Command('statistics'))
async def req(message: types.Message):
    await admin_statistics(message)


# –∫–æ–º–∞–Ω–¥–∞ /message –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
@dp.message_handler(Admins_message(), Command('message'))
async def send_message(message: types.Message):
    await message.answer('–ö–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:')
    await Send_messsage.send_mess.set()  # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

# –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
@dp.message_handler(state=Send_messsage.send_mess)
async def send_message(message: types.Message, state: FSMContext):
    await send_mess(message.text)
    await message.answer('–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
    await state.finish()

async def send_mess(message: types.Message):
    # –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–∑ –ë–î
    users = await commands.select_all_users()
    for user in users:
        try:
            await dp.bot.send_message(chat_id=user.user_id, text=message)
            await sleep(0.25)  # 4 —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥—É
        except Exception:
            pass
