from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.types import CallbackQuery

from bot_send.send_new_circ_all import forecast_for_next_draw
from filters import PositiveBalance, IsSubsriber
from forecast.prediction import statistics, statistics_4, format_statistic
from keyboards.inline import ikb_menu
from keyboards.inline.buy_ticket import ikb_buy_ticket
from loader import dp

from search.input_validation import validation
from states import Circ_state, Number_search
from utils.db_api import circ_commands
from utils.db_api.circ_commands import count_edition, combination_search_1, \
    combination_search_2


# –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ menu , —Ç–æ –≤—ã–≤–æ–¥–∏ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
@dp.message_handler(IsSubsriber(), Command('menu'))
async def menu(message: types.Message):
    await message.answer('–í—ã–±–µ—Ä–µ—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é:', reply_markup=ikb_menu)


# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏—Ä–∞–∂–µ–π
@dp.callback_query_handler(IsSubsriber(), text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏—Ä–∞–∂–µ–π")
async def send_message(call: CallbackQuery):
    count = await count_edition()  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏—Ä–∞–∂–µ–π
    await call.message.answer(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏—Ä–∞–∂–µ–π: {count}\n')
    await call.message.edit_reply_markup()  # —É–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await call.message.delete()  # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ '–í—ã–±–µ—Ä–µ—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é:'


# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∏—Ä–∞–∂ ‚Ññ
@dp.callback_query_handler(IsSubsriber(), text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∏—Ä–∞–∂ ‚Ññ')
async def accept_reg(call: types.CallbackQuery):
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–∏—Ä–∞–∂–∞:')
    await Circ_state.circulations.set()
    await call.message.edit_reply_markup()
    await call.message.delete()  # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ '–í—ã–±–µ—Ä–µ—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é:'


# –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–∏—Ä–∞–∂–∞:
@dp.message_handler(state=Circ_state.circulations)
async def accept_reg(message: types.Message, state: FSMContext):
    circ = message.text  # –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏—Ä–∞–∂
    numbers_drawn = await circ_commands.select_edition(circ)  # –≤—ã–ø–∞–≤—à–∏–µ —á–∏—Å–ª–∞
    numbers_drawn_1 = str(numbers_drawn[0])  # –¥–æ—Å—Ç–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä—è–¥ –≤—ã–ø–∞–≤—à–∏—Ö —á–∏—Å–µ–ª –∏–∑ —Å–ø–∏—Å–∫–∞
    numbers_drawn_2 = str(numbers_drawn[1])  # –¥–æ—Å—Ç–∞–µ–º –≤—Ç–æ—Ä–æ–π —Ä—è–¥ –≤—ã–ø–∞–≤—à–∏—Ö —á–∏—Å–µ–ª –∏–∑ —Å–ø–∏—Å–∫–∞
    date = str(numbers_drawn[2])  # –¥–æ—Å—Ç–∞–µ–º –≤—Ä–µ–º—è —Ç–∏—Ä–∞–∂–∞

    if numbers_drawn_1 == 'None':
        await message.answer('–¢–∏—Ä–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:', reply_markup=ikb_menu)
    else:
        await message.answer(f'–¢–∏—Ä–∞–∂ ‚Ññ {circ} –æ—Ç {date} \n–í—ã–ø–∞–≤—à–∏–µ —á–∏—Å–ª–∞:\n<b>{numbers_drawn_1}</b>  '
                             f'<b>{numbers_drawn_2}</b>')
    await state.finish()


# –ü–æ–∏—Å–∫ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
@dp.callback_query_handler(IsSubsriber(), text='–ü–æ–∏—Å–∫ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏')
async def accept_reg(call: types.CallbackQuery):
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–µ –±–æ–ª–µ–µ 4-—Ö —á–∏—Å–µ–ª —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä 03 11 19):')
    await call.message.answer('<b>–ü–æ–ª–µ 1:</b>')
    await Number_search.number_search_1.set()  # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–µ—Ä–≤–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
    await call.message.edit_reply_markup()
    await call.message.delete()  # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ '–í—ã–±–µ—Ä–µ—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é:'


# –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–≤–æ–π –≤–≤–µ–¥–µ–Ω–Ω–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
@dp.message_handler(state=Number_search.number_search_1)
async def accept_reg(message: types.Message, state: FSMContext):
    await state.update_data(number_search_1=message.text)  # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ data
    await message.answer('<b>–ü–æ–ª–µ 2:</b>')  # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤–≤–æ–¥–µ –≤—Ç–æ—Ä–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
    await Number_search.number_search_2.set()  # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—Ç–æ—Ä–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏


# –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Ç–æ—Ä–æ–π –≤–≤–µ–¥–µ–Ω–Ω–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
@dp.message_handler(state=Number_search.number_search_2)
async def accept_reg(message: types.Message, state: FSMContext):
    await state.update_data(number_search_2=message.text)  # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ data
    data = await state.get_data()  # –ø–æ–ª—É—á–∞–µ–º –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Å–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤
    number_search_1 = data.get('number_search_1')  # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    number_search_2 = data.get('number_search_2')
    await state.finish()  # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    output_1 = validation(number_search_1)
    output_2 = validation(number_search_2)

    if output_1.replace(' ', '').isdigit():
        output_1 = len(await combination_search_1(output_1))
        only_numb_1 = True
    else:
        only_numb_1 = False
    if output_2.replace(' ', '').isdigit():
        output_2 = len(await combination_search_2(output_2))
        only_numb_2 = True
    else:
        only_numb_2 = False
    # –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
    if only_numb_1 and only_numb_2:
        await message.answer(f'<b>–ü–æ–ª–µ 1: \n –∫–æ–º–±–∏–Ω–∞—Ü–∏—è: </b>{number_search_1} \n'
                             f'–≤—Å—Ç—Ä–µ—á–∞–ª–∞—Å—å –≤ {output_1} —Ç–∏—Ä–∞–∂–∞—Ö\n'
                             f'<b>–ü–æ–ª–µ 2: \n –∫–æ–º–±–∏–Ω–∞—Ü–∏—è: </b>{number_search_2} \n'
                             f'–≤—Å—Ç—Ä–µ—á–∞–ª–∞—Å—å –≤ {output_2} —Ç–∏—Ä–∞–∂–∞—Ö')
    # –∏–Ω–∞—á–µ –≤—ã–≤–æ–¥ –æ—à–∏–±–∫–∏
    else:
        await message.answer(f'<b>–ü–æ–ª–µ 1: </b>{number_search_1} ({output_1})\n'
                             f'<b>–ü–æ–ª–µ 2: </b>{number_search_2} ({output_2})')

async def prognosis(message: types.Message):
    # –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ç–∏—Ä–∞–∂ 4 —á–∏—Å–ª–∞
    circ = await count_edition()  # –ö—Ä–∞–π–Ω–∏–π —Ç–∏—Ä–∞–∂
    field_1, field_2 = await forecast_for_next_draw()
    await message.answer(f'üëâ<b>–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Ç–∏—Ä–∞–∂ ‚Ññ{circ + 1}:</b>')
    await message.answer(field_1)
    await message.answer(field_2, reply_markup=ikb_buy_ticket)

@dp.callback_query_handler(PositiveBalance(), IsSubsriber(), text="–ü—Ä–æ–≥–Ω–æ–∑")
async def send_message(call: CallbackQuery):
    await call.message.edit_reply_markup()  # —É–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await call.message.delete()  # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ '–í—ã–±–µ—Ä–µ—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é:'
    await prognosis(call.message)


