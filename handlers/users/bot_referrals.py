from aiogram import types
from aiogram.utils.deep_linking import get_start_link
from aiogram.dispatcher.filters.state import StatesGroup, State
from filters import IsSubscriber
from handlers.admin.update_referrals import find_keys_by_value, calculate_levels
from keyboards.cancel import keyboard_cancel
from loader import dp
from utils.db_api.users_commands import get_user_referrals, print_user_levels, reset_user_data_by_id, save_count_levels, \
    get_user_id_who_invited_dict
from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove


@dp.message_handler(text="/ref")  # —Å–æ–∑–¥–∞–µ–º —Ö—ç–Ω–¥–ª–µ—Ä
async def command_ref(message: types.Message):  # —Å–æ–∑–¥–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    try:
        ref_link = await get_start_link(payload=message.from_user.id)
        await reset_user_data_by_id(message.from_user.id)
        dict_user = await get_user_id_who_invited_dict(message.from_user.id)
        await calculate_levels(dict_user, message.from_user.id)
        ref = await print_user_levels(message.from_user.id)

        await message.answer(f'–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}\n'
                             f'–£ —Ç–µ–±—è {ref[1]} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫–æ–º–∞–Ω–¥–µ\n'
                             f'{ref[0]}\n'
                             f'–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n'
                             f'{ref_link}\n'
                             f'üü¢–î–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –í–∞—à –∞–¥—Ä–µ—Å–∞—Ç –¥–æ–ª–∂–µ–Ω üëâ–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ø–µ—Ä–µ–π—Ç–∏, –ö–õ–ò–ö–ù–£–í –ø–æ —Å—Å—ã–ª–∫–µ '
                             f'–≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º, –∫–æ—Ç–æ—Ä—É—é –≤—ã –µ–º—É –æ—Ç–ø—Ä–∞–≤–∏–ª–∏.\n'
                             f'üí¢–ù–ï –≤—Å—Ç–∞–≤–ª—è—Ç—å –≤ –ø–æ–∏—Å–∫\n'
                             f'üí¢–ù–ï –≤—Å—Ç–∞–≤–ª—è—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä\n'
                             f'üí¢–ù–ï –≤—Å—Ç–∞–≤–ª—è—Ç—å –≤ WhatsApp')
    except Exception as e:
        pass


class Ref(StatesGroup):
    id = State()  # –≤–∞—Ä–∏–∞–Ω—Ç –∑–∞—è–≤–∫–∏


@dp.message_handler(text="/ref_id")  # —Å–æ–∑–¥–∞–µ–º —Ö—ç–Ω–¥–ª–µ—Ä
async def command_ref(message: types.Message):  # —Å–æ–∑–¥–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    await message.answer(f'–í–≤–µ–¥–∏ id', reply_markup=keyboard_cancel)
    await Ref.id.set()


@dp.message_handler(state=Ref.id)
async def process_fio(message: types.Message, state: FSMContext):
    text = message.text
    if text.lower() == '–æ—Ç–º–µ–Ω–∞':
        await message.answer('–û—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=ReplyKeyboardRemove())
        await state.finish()  # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    else:
        try:
            user = int(message.text)
            ref = await print_user_levels(user)

            await message.answer(f'–£ —Ç–µ–±—è {ref[1]} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫–æ–º–∞–Ω–¥–µ\n'
                                 f'{ref[0]}\n')
        except Exception:
            await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
        await state.finish()
